-- MySQL Script Generated by AtomicG

-- Uncomment any table you wish to recreate.
-- DROP TABLE IF EXISTS `group`;
-- DROP TABLE IF EXISTS `user`;

-- Create any missing table
CREATE TABLE IF NOT EXISTS `group` (
    `id` bigint(20) NOT NULL AUTO_INCREMENT,
    `name` varchar(255) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS `user` (
    `id` bigint(20) NOT NULL AUTO_INCREMENT,
    `password` varchar(255) NOT NULL,
    `name` varchar(255) NOT NULL,
    `age` int NOT NULL,
    `email` varchar(255) NOT NULL,
    `salary` decimal(11,2) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB;

-- Procedure for the save creation of indexes.
DELIMITER $$
DROP PROCEDURE IF EXISTS `create_index` $$
CREATE PROCEDURE `create_index`
(
    IN given_table    VARCHAR(64),
    IN given_index    VARCHAR(64),
    IN given_type     VARCHAR(15),
    IN given_columns  VARCHAR(64)
)
BEGIN
    DECLARE indexIsThere INTEGER;
    DECLARE given_database VARCHAR(64);

    SELECT DATABASE() FROM dual INTO given_database;

    SELECT COUNT(1) INTO indexIsThere
    FROM INFORMATION_SCHEMA.STATISTICS
    WHERE table_schema = given_database
    AND   table_name   = given_table
    AND   index_name   = given_index;

    IF indexIsThere = 0 THEN
        SET @sqlstmt = CONCAT('CREATE ', given_type, ' ', given_index,' ON ', given_database,'.',given_table,' (',given_columns,')');
        PREPARE st FROM @sqlstmt;
        EXECUTE st;
        DEALLOCATE PREPARE st;

        SELECT CONCAT('Index ',given_index,' created on ', given_database,'.',given_table) errorMessage;
        ELSE
        SELECT CONCAT('Index ',given_index,' already exists on Table ', given_database,'.',given_table) errorMessage;
    END IF;

END $$
DELIMITER ;

-- Create any missing index
-- Table group indexes.

-- Table user indexes.
CALL create_index('user', 'idx_user_name', 'INDEX', 'name');
CALL create_index('user', 'idx_user_email', 'UNIQUE INDEX', 'email');


-- Rules for the columns of the tables withing triggers
DELIMITER $$

DROP TRIGGER IF EXISTS `ins_tg_group` $$
CREATE TRIGGER `ins_tg_group`
BEFORE INSERT ON `group`
FOR EACH ROW
BEGIN
    -- SET NEW.name = TRIM(NEW.name);
END $$

DROP TRIGGER IF EXISTS `udt_tg_group` $$
CREATE TRIGGER `udt_tg_group`
BEFORE UPDATE ON `group`
FOR EACH ROW
BEGIN
    -- SET NEW.name = TRIM(NEW.name);
END $$

DROP TRIGGER IF EXISTS `ins_tg_user` $$
CREATE TRIGGER `ins_tg_user`
BEFORE INSERT ON `user`
FOR EACH ROW
BEGIN
    -- SET NEW.name = TRIM(NEW.name);
END $$

DROP TRIGGER IF EXISTS `udt_tg_user` $$
CREATE TRIGGER `udt_tg_user`
BEFORE UPDATE ON `user`
FOR EACH ROW
BEGIN
    -- SET NEW.name = TRIM(NEW.name);
END $$

DELIMITER ;
